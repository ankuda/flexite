// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
$flexite(window).on('load', function () {
    var $tree = $flexite("#tree");
    window.tree = new Tree($tree);
    tree.init();

    $flexite("#delete-node-btn").on("click", function () {
        $tree.treeview("getSelected").forEach(function (node) {
            $flexite.ajax({
                url: node.selfHref,
                type: 'DELETE',
                success: function () {
                    $tree.treeview("removeNode", node);
                    $flexite("#section-2").html("");
                }
            });
        })

    });

    $flexite("#edit-node-btn").on("click", function () {
        $tree.treeview("getSelected").forEach(function (node) {
            $flexite.get(node.editHref);
        })
    });

    $flexite("#copy-node-btn").on("click", function (){
        $tree.treeview("getSelected").forEach(function (node){
            $flexite.post(node.copyHref);
        });
    });

    $flexite("#show-diff").on("click", function () {
        $flexite.get("<%= Flexite::Engine.routes.url_helpers.diff_path %>" + "?stage=" + $flexite("select[id='stage']").text());
    });

    $flexite("#new-node-btn").on("click", function () {
        var selected = $tree.treeview("getSelected");

        if(selected.length) {
            selected.forEach(function (node) {
                $flexite.get(node.newHref);
            })
        } else {
            $flexite.get("<%= Flexite::Engine.routes.url_helpers.new_config_path %>");
        }
    });

    var search = function(e) {
        var pattern = $flexite('#input-search').val();
        var options = {
            ignoreCase: $flexite('#chk-ignore-case').is(':checked'),
            exactMatch: $flexite('#chk-exact-match').is(':checked'),
            revealResults: $flexite('#chk-reveal-results').is(':checked')
            };
        $tree.treeview('search', [ pattern, options ]);
    };

    $flexite('#btn-search').on('click', search);
    $flexite('#input-search').on('keyup', search);

    $flexite('#btn-clear-search').on('click', function (e) {
          $tree.treeview('clearSearch');
          $flexite('#input-search').val('');
          $flexite('#search-output').html('');
    });
});

function Tree(selector) {
    var self = this, tree = $flexite(selector);

    this.init = function () {
        $flexite.get("<%= Flexite::Engine.routes.url_helpers.configs_path(format: :json) %>", function (data) {
            tree.treeview({
                data: data,
                levels: 0,
                searchResultBackColor: '#FFFF00',
                onNodeSelected: function (event, node) {
                    if (node.ajaxOnSelect) $flexite.get(node.dataHref);
                },
                onNodeUnselected: function (event, node) {
                    $flexite("#section-2").html("");
                    $flexite("#section-3").html("");
                }
            })
        })
    }

    this.reload = function () {
        tree.treeview("remove");
        self.init();
    }

    this.unselectAll = function () {
        tree.treeview("getSelected").forEach(function (node) {
            tree.treeview("unselectNode", node);
        });
    }

    this.addNode = function (jsonNode, parentId) {
        tree.treeview(true).addToParent(JSON.parse(jsonNode), parentId);
    }

    this.editNode = function(jsonNode) {
        tree.treeview(true).editNode(JSON.parse(jsonNode));
    }

    this.setDataHref = function (dataHref) {
        var node = tree.treeview("getSelected")[0];
        node.dataHref = dataHref;
    }
}
